.. mpsy documentation master file, created by
   sphinx-quickstart on Wed Apr 03 15:04:29 2013.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Psychophysics in "pure" Python
==============================

Contents:

.. contents::
    :local:
    :depth: 2


The "Hello Lattice!" experiment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We start with a basic example that will use a lattice stimulus.
Our aim is to run a simple experiment with three trials. In each trial we will show first a fixation dot,
then present a dot lattice and finally collect a response. The code of the full "Hello lattice!"
experiment is as follows:

.. literalinclude:: c:\Users\juricap\Dropbox\shared evolver\visionpyg_glsl\dots_tut1.py
    :linenos:

To run it simply download the file and execute it. If you are new to Python, I suggest you try 
creating and running the script from scratch. Create a simple text file, name it "dots_tut1.py", 
copy the code from the box above and paste it into your text editor. Save the script and run it.

Now we will walk through the code:

.. literalinclude:: c:\Users\juricap\Dropbox\shared evolver\visionpyg_glsl\dots_tut1.py
    :linenos:
    :lines: 1-7

The first few lines initialize the library (line 1), initialize the window (lines 3-4) and 
create Python variables ``cx, cy`` that will hold the coordinates of the center of the screen, 
which will later be used to position stimuli.

Next we will need to create presentation screens.

.. literalinclude:: c:\Users\juricap\Dropbox\shared evolver\visionpyg_glsl\dots_tut1.py
    :linenos:
    :lines: 9-13


Recording responses
~~~~~~~~~~~~~~~~~~~

We will build on the previous example. We leave the stimuli intact and add a piece of code 
that will enable keeping record of various events in the experiment. Events are generated 
by mPsy presentation module or by stimuli. Three types of events are generated by default:

* TRIAL event - when a trial starts
* KEY event - a key is pressed
* MOUSE event - a mouse button is pressed 

To catch the events we need to create a function that gets called every time an event is triggered:

.. literalinclude:: c:\Users\juricap\Dropbox\shared evolver\visionpyg_glsl\dots_tut2.py
    :linenos:
    :lines: 4-9

The function and its parameters can have any names, but the number of parameters has to have always the same (four).
The contents of the parameters will be:

* event - text, name of the event
* time - numerical value, number of seconds (since when depends on platform)
* trial - trial object, this object contains stimuli and its parameters
* args - properties of the event, for KEY event the name of the key pressed, 
         for MOUSE event the coordinate and the button clicked
 
When you run the resulting file, the file *dots2.log* will look like this:

.. code-block:: none

    TRIAL 0.575153048996 Start []
    KEY 1.31466873576 Start SPACE
    TRIAL 1.3156867604 Fixation []
    TRIAL 2.33855819112 Lattices []
    TRIAL 3.86717378322 Response []
    MOUSE 5.86993089944 Response [814, 453, 1]
    TRIAL 5.87124100698 Fixation []
    TRIAL 6.89199839131 Lattices []
    TRIAL 8.42179287708 Response []
    MOUSE 9.6018394316 Response [627, 428, 1]
    TRIAL 9.60313044609 Fixation []
    TRIAL 10.6309067569 Lattices []
    TRIAL 12.1618943546 Response []
    MOUSE 15.1811783249 Response [814, 456, 1]
    TRIAL 15.1816048716 End [] 

Sometimes it might be more useful to keep only the response, this can be done by looking at the content
of the parameters passed to the logging function:

.. code-block:: python

    def record_event(event,time,trial,args):
        if event == 'MOUSE' and trial.name == 'Response':
            print >>log, 'RESP', args[0], args[1]

A record of such an experiment would the look like this:

.. code-block:: none

    RESP 814 453
    RESP 627 428
    RESP 814 456

Later on we will show how to compute correctness of the response before writing it out.

Randomizing stimulus parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Parameters of stimuli in an experiment are usually randomized, shuffled.
To generate a specific number of shuffled parameters we can use Python lists. Specifically,
two operations come in handy, shuffling and concatenation.

.. code-block:: python

    >> ratios = [1.0,1.1,1.2,1.3,1.4,1.5]
    >> shuffle(ratios)
    >> ratios
    [1.0, 1.3, 1.4, 1.1, 1.2, 1.5]

In the snippet above, we have created a list of values. Then we used Python `shuffle` function
to shuffle the list in-place (this means, the original list will be modified).

To create a more complicated set of parameters we can concatenate list by the `+` operator
or make multiple copies of a list with the `*` operator:

.. code-block:: python

    >> ratios = [1.0,1.1,1.2]
    >> ratios + ratios
    [1.0, 1.1, 1.2, 1.0, 1.1, 1.2]
    >> ratios*3
    [1.0, 1.1, 1.2, 1.0, 1.1, 1.2, 1.0, 1.1, 1.2]
    >> [ratios,ratios]*2
    [[1.0, 1.1, 1.2], [1.0, 1.1, 1.2], [1.0, 1.1, 1.2], [1.0, 1.1, 1.2]]

To create three blocks of shuffled trials:

.. code-block:: python

    trials = []
    for i in xrange(4):
        ratios = [1.0,1.1,1.2]
        shuffle(ratios)
        trials.append(ratios)

Then

.. code-block:: python

    >> trials
    [[1.0, 1.2, 1.1],[1.0, 1.1, 1.2],[1.2, 1.1, 1.0],[1.0, 1.2, 1.1]]

The `trials` list of blocks, as any other list, can be shuffled.

.. code-block:: python

    >> trials
    [[1.0, 1.2, 1.1],[1.0, 1.1, 1.2],[1.2, 1.1, 1.0],[1.0, 1.2, 1.1]]


Coding your own Stimuli
~~~~~~~~~~~~~~~~~~~~~~~

Modular Psychophysics is modular and each of its stimuli are independent programs.
The stimuli providedtrhough `stimuli.py` module are examples. 
Modular Psychophysics requires that stimulus has a function draw() and a field (or member) called `params`, 
which is an associative array. Associative array is a fundamental object type that 
any language has (MATLAB’s struct, R’s named list etc.).

A minimal Python stimulus definition is as follows:

.. code-block:: python

    from pyglet import text

    class Text:
        def __init__(self,**params):
            self.params = Params(\**params)
            self.text = text.Label(self.params.msg,anchor_x='center',halign='center')
        def draw(self):
            self.text.draw()

The example stimlus `Text` is a very simple yet functional example of a text label.

.. code-block:: python

    from pyglet import text

    class Text:
        def __init__(self,\**params):
            print params
            self.params = Params(\**params)
            self.text = text.Label(self.params.msg,halign='center',anchor_x='center')
        def draw(self):
            self.text.draw()

    if __name__ == "__main__":
        import sys
        sys.path[:0] = ['packages.zip']

        from pyglet.gl import *
        from pyglet.window import key
        from pyglet import clock, clock, font, graphics, window, text

        class Params:
            def __init__(self,**kwargs):
                self.__dict__.update(kwargs)
            def update(self,**kwargs):
                self.__dict__.update(kwargs)
            def __str__(self):
                return '\n'.join( '%s = %s'%x for x in self.__dict__.items() )
            def __repr__(self):
                return 'Params(%s)'%(', '.join( '%s=%s'%x for x in self.__dict__.items() ),)
            def default(self):
                return self.__dict__

        win = window.Window()
        stim = Text(msg='Welcome to Movable Psychophysics.')

        def update(dt):
            win.clear()
            glPushMatrix()
            glTranslatef(320,240,0)
            stim.draw()
            glPopMatrix()
        
        clock.schedule_interval(update,1/60.0)
        pyglet.app.run()


